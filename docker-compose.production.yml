# Docker Compose para producción de Hostreamly
version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:13-alpine
    container_name: hostreamly-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-hostreamly}
      POSTGRES_USER: ${POSTGRES_USER:-hostreamly_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    networks:
      - hostreamly-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-hostreamly_user}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    # No exponer puerto en producción por seguridad
    # ports:
    #   - "5432:5432"

  # Redis para cache y sesiones
  redis:
    image: redis:7-alpine
    container_name: hostreamly-redis-prod
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - hostreamly-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 30s
    # No exponer puerto en producción por seguridad
    # ports:
    #   - "6379:6379"

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: hostreamly-backend-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-hostreamly}
      DB_USER: ${POSTGRES_USER:-hostreamly_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_URL: postgresql://${POSTGRES_USER:-hostreamly_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-hostreamly}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      
      # DigitalOcean Spaces
      DO_SPACES_KEY: ${DO_SPACES_KEY}
      DO_SPACES_SECRET: ${DO_SPACES_SECRET}
      DO_SPACES_BUCKET: ${DO_SPACES_BUCKET}
      DO_SPACES_REGION: ${DO_SPACES_REGION:-nyc3}
      DO_SPACES_ENDPOINT: ${DO_SPACES_ENDPOINT:-https://nyc3.digitaloceanspaces.com}
      
      # Bunny.net
      BUNNY_API_KEY: ${BUNNY_API_KEY}
      BUNNY_STREAM_API_KEY: ${BUNNY_STREAM_API_KEY}
      BUNNY_CDN_API_KEY: ${BUNNY_CDN_API_KEY}
      BUNNY_STORAGE_ZONE: ${BUNNY_STORAGE_ZONE}
      
      # URLs de producción
      FRONTEND_URL: ${FRONTEND_URL:-https://hostreamly.com}
      BACKEND_URL: ${BACKEND_URL:-https://api.hostreamly.com}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-https://hostreamly.com}
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hostreamly-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # No exponer puerto directamente, usar nginx
    # ports:
    #   - "3001:3001"

  # Frontend (build estático)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: hostreamly-frontend-prod
    restart: always
    environment:
      VITE_API_URL: ${BACKEND_URL:-https://api.hostreamly.com}
      VITE_BUNNY_CDN_URL: ${VITE_BUNNY_CDN_URL}
      VITE_BUNNY_STREAM_URL: ${VITE_BUNNY_STREAM_URL}
    networks:
      - hostreamly-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # No exponer puerto directamente, usar nginx
    # ports:
    #   - "80:80"

  # Nginx Proxy Reverso
  nginx:
    image: nginx:alpine
    container_name: hostreamly-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - hostreamly-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  hostreamly-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16