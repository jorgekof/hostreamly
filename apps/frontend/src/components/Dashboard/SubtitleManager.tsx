import { useState, useEffect, useRef, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { 
  Upload, 
  Download, 
  Edit, 
  Trash2, 
  Play, 
  Pause, 
  SkipBack, 
  SkipForward,
  Languages,
  FileText,
  Clock,
  Plus,
  Eye,
  Save
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { apiClient as api } from '@/lib/api';

interface SubtitleTrack {
  id: string;
  videoId: string;
  language: string;
  languageCode: string;
  label: string;
  format: 'srt' | 'vtt';
  fileUrl: string;
  isDefault: boolean;
  isAutoGenerated: boolean;
  createdAt: string;
  updatedAt: string;
}

interface SubtitleCue {
  id: string;
  startTime: number;
  endTime: number;
  text: string;
}

interface SubtitleManagerProps {
  videoId: string;
  videoTitle?: string;
}

const SUPPORTED_LANGUAGES = [
  { code: 'es', name: 'Español', flag: '🇪🇸' },
  { code: 'en', name: 'English', flag: '🇺🇸' },
  { code: 'fr', name: 'Français', flag: '🇫🇷' },
  { code: 'de', name: 'Deutsch', flag: '🇩🇪' },
  { code: 'it', name: 'Italiano', flag: '🇮🇹' },
  { code: 'pt', name: 'Português', flag: '🇵🇹' },
  { code: 'ru', name: 'Русский', flag: '🇷🇺' },
  { code: 'ja', name: '日本語', flag: '🇯🇵' },
  { code: 'ko', name: '한국어', flag: '🇰🇷' },
  { code: 'zh', name: '中文', flag: '🇨🇳' },
  { code: 'ar', name: 'العربية', flag: '🇸🇦' },
  { code: 'hi', name: 'हिन्दी', flag: '🇮🇳' }
];

export const SubtitleManager = ({ videoId, videoTitle }: SubtitleManagerProps) => {
  const [tracks, setTracks] = useState<SubtitleTrack[]>([]);
  const [selectedTrack, setSelectedTrack] = useState<SubtitleTrack | null>(null);
  const [cues, setCues] = useState<SubtitleCue[]>([]);
  const [loading, setLoading] = useState(false);
  const [uploading, setUploading] = useState(false);
  const [editingCue, setEditingCue] = useState<SubtitleCue | null>(null);
  const [currentTime, setCurrentTime] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  const [showEditor, setShowEditor] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();

  useEffect(() => {
    loadSubtitleTracks();
  }, [videoId, loadSubtitleTracks]);

  useEffect(() => {
    if (selectedTrack) {
      loadSubtitleCues(selectedTrack.id);
    }
  }, [selectedTrack, loadSubtitleCues]);

  const loadSubtitleTracks = useCallback(async () => {
    try {
      
      setTracks(data || []);
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
      toast({
        title: "Error al cargar subtítulos",
        description: errorMessage,
        variant: "destructive",
      });
    }
  }, [videoId, toast]);

  const loadSubtitleCues = useCallback(async (trackId: string) => {
    try {
  
        const data = null, error = null;

      if (error) throw error;
      setCues(data || []);
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
      toast({
        title: "Error al cargar cues",
        description: errorMessage,
        variant: "destructive",
      });
    }
  }, [toast]);

  const uploadSubtitleFile = async (file: File, language: string, languageCode: string, format: 'srt' | 'vtt') => {
    setUploading(true);
    try {
      // Upload file to storage
      const formData = new FormData();
      formData.append('file', file);
      formData.append('videoId', videoId);
      formData.append('languageCode', languageCode);
      
      const response = await api.post('/subtitles/upload', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      const publicUrl = response.data.fileUrl;

      // Create subtitle track record

        const data = null, error = null;

      if (trackError) throw trackError;

      // Parse and save subtitle cues
      const content = await file.text();
      const parsedCues = parseSubtitleFile(content, format);
      
      if (parsedCues.length > 0) {

        const data = null, error = null;

        if (cuesError) throw cuesError;
      }

      await loadSubtitleTracks();
      
      toast({
        title: "Subtítulo subido",
        description: `Se han procesado ${parsedCues.length} líneas de subtítulos`,
      });
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
      toast({
        title: "Error al subir subtítulo",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setUploading(false);
    }
  };

  const parseSubtitleFile = (content: string, format: 'srt' | 'vtt'): SubtitleCue[] => {
    const cues: SubtitleCue[] = [];
    
    if (format === 'srt') {
      const blocks = content.trim().split(/\n\s*\n/);
      
      blocks.forEach((block, index) => {
        const lines = block.trim().split('\n');
        if (lines.length >= 3) {
          const timeLine = lines[1];
          const textLines = lines.slice(2);
          
          const timeMatch = timeLine.match(/(\d{2}:\d{2}:\d{2},\d{3}) --> (\d{2}:\d{2}:\d{2},\d{3})/);
          if (timeMatch) {
            const startTime = parseTimeToSeconds(timeMatch[1].replace(',', '.'));
            const endTime = parseTimeToSeconds(timeMatch[2].replace(',', '.'));
            
            cues.push({
              id: `cue-${index}`,
              startTime,
              endTime,
              text: textLines.join('\n')
            });
          }
        }
      });
    } else if (format === 'vtt') {
      const lines = content.split('\n');
      let i = 0;
      
      // Skip WEBVTT header
      while (i < lines.length && !lines[i].includes('-->')) {
        i++;
      }
      
      while (i < lines.length) {
        const timeLine = lines[i];
        const timeMatch = timeLine.match(/(\d{2}:\d{2}:\d{2}\.\d{3}) --> (\d{2}:\d{2}:\d{2}\.\d{3})/);
        
        if (timeMatch) {
          const startTime = parseTimeToSeconds(timeMatch[1]);
          const endTime = parseTimeToSeconds(timeMatch[2]);
          
          i++;
          const textLines = [];
          while (i < lines.length && lines[i].trim() !== '') {
            textLines.push(lines[i]);
            i++;
          }
          
          cues.push({
            id: `cue-${cues.length}`,
            startTime,
            endTime,
            text: textLines.join('\n')
          });
        }
        i++;
      }
    }
    
    return cues;
  };

  const parseTimeToSeconds = (timeStr: string): number => {
    const parts = timeStr.split(':');
    const hours = parseInt(parts[0]);
    const minutes = parseInt(parts[1]);
    const secondsParts = parts[2].split(/[.,]/);
    const seconds = parseInt(secondsParts[0]);
    const milliseconds = parseInt(secondsParts[1] || '0');
    
    return hours * 3600 + minutes * 60 + seconds + milliseconds / 1000;
  };

  const formatTime = (seconds: number): string => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = Math.floor(seconds % 60);
    const ms = Math.floor((seconds % 1) * 1000);
    
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}.${ms.toString().padStart(3, '0')}`;
  };

  const deleteTrack = async (trackId: string) => {
    try {
      
        const data = null, error = null;

      if (error) throw error;

      await loadSubtitleTracks();
      if (selectedTrack?.id === trackId) {
        setSelectedTrack(null);
        setCues([]);
      }
      
      toast({
        title: "Subtítulo eliminado",
        description: "El track de subtítulos ha sido eliminado",
      });
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
      toast({
        title: "Error al eliminar",
        description: errorMessage,
        variant: "destructive",
      });
    }
  };

  const saveCue = async (cue: SubtitleCue) => {
    try {
      if (!selectedTrack) return;
      
      
        const data = null, error = null;

      if (error) throw error;

      await loadSubtitleCues(selectedTrack.id);
      setEditingCue(null);
      
      toast({
        title: "Cue guardado",
        description: "Los cambios han sido guardados",
      });
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
      toast({
        title: "Error al guardar",
        description: errorMessage,
        variant: "destructive",
      });
    }
  };

  const exportSubtitles = (track: SubtitleTrack, format: 'srt' | 'vtt') => {
    let content = '';
    
    if (format === 'srt') {
      content = cues.map((cue, index) => {
        const startTime = formatTime(cue.startTime).replace('.', ',');
        const endTime = formatTime(cue.endTime).replace('.', ',');
        return `${index + 1}\n${startTime} --> ${endTime}\n${cue.text}\n`;
      }).join('\n');
    } else {
      content = 'WEBVTT\n\n' + cues.map(cue => {
        const startTime = formatTime(cue.startTime);
        const endTime = formatTime(cue.endTime);
        return `${startTime} --> ${endTime}\n${cue.text}\n`;
      }).join('\n');
    }
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${videoTitle || 'video'}-${track.languageCode}.${format}`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          <Languages className="w-6 h-6 text-blue-500" />
          <div>
            <h2 className="text-2xl font-bold">Gestión de Subtítulos</h2>
            <p className="text-muted-foreground">Administra subtítulos en múltiples idiomas</p>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <Badge variant="outline">{tracks.length} idiomas</Badge>
          <Dialog>
            <DialogTrigger asChild>
              <Button className="flex items-center gap-2">
                <Plus className="w-4 h-4" />
                Añadir Subtítulos
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-md">
              <DialogHeader>
                <DialogTitle>Subir Subtítulos</DialogTitle>
              </DialogHeader>
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label>Idioma</Label>
                  <Select>
                    <SelectTrigger>
                      <SelectValue placeholder="Selecciona un idioma" />
                    </SelectTrigger>
                    <SelectContent>
                      {SUPPORTED_LANGUAGES.map(lang => (
                        <SelectItem key={lang.code} value={`${lang.code}|${lang.name}`}>
                          {lang.flag} {lang.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2">
                  <Label>Formato</Label>
                  <Select defaultValue="srt">
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="srt">SRT (SubRip)</SelectItem>
                      <SelectItem value="vtt">VTT (WebVTT)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2">
                  <Label>Archivo</Label>
                  <Button
                    variant="outline"
                    onClick={() => fileInputRef.current?.click()}
                    disabled={uploading}
                    className="w-full flex items-center gap-2"
                  >
                    <Upload className="w-4 h-4" />
                    {uploading ? 'Subiendo...' : 'Seleccionar Archivo'}
                  </Button>
                  <input
                    ref={fileInputRef}
                    type="file"
                    accept=".srt,.vtt"
                    className="hidden"
                    onChange={(e) => {
                      const file = e.target.files?.[0];
                      if (file) {
                        // This would need to be connected to the form state
                    
                      }
                    }}
                  />
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      <Tabs defaultValue="tracks" className="space-y-6">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="tracks">Tracks</TabsTrigger>
          <TabsTrigger value="editor">Editor</TabsTrigger>
          <TabsTrigger value="preview">Vista Previa</TabsTrigger>
        </TabsList>

        {/* Tracks Management */}
        <TabsContent value="tracks" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Tracks de Subtítulos</CardTitle>
            </CardHeader>
            <CardContent>
              {tracks.length === 0 ? (
                <div className="text-center py-8">
                  <Languages className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                  <h3 className="text-lg font-medium mb-2">No hay subtítulos</h3>
                  <p className="text-muted-foreground mb-4">Sube archivos SRT o VTT para comenzar</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {tracks.map(track => {
                    const language = SUPPORTED_LANGUAGES.find(l => l.code === track.languageCode);
                    return (
                      <div key={track.id} className="flex items-center justify-between p-4 border rounded-lg">
                        <div className="flex items-center gap-3">
                          <div className="text-2xl">{language?.flag || '🌐'}</div>
                          <div>
                            <div className="font-medium">{track.language}</div>
                            <div className="text-sm text-muted-foreground">
                              {track.format.toUpperCase()} • 
                              {track.isDefault && <Badge variant="default" className="mr-1">Por defecto</Badge>}
                              {track.isAutoGenerated && <Badge variant="secondary">Auto-generado</Badge>}
                            </div>
                          </div>
                        </div>
                        
                        <div className="flex items-center gap-2">
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => setSelectedTrack(track)}
                            className="flex items-center gap-1"
                          >
                            <Edit className="w-4 h-4" />
                            Editar
                          </Button>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => exportSubtitles(track, track.format)}
                            className="flex items-center gap-1"
                          >
                            <Download className="w-4 h-4" />
                            Descargar
                          </Button>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => deleteTrack(track.id)}
                            className="flex items-center gap-1 text-red-600 hover:text-red-700"
                          >
                            <Trash2 className="w-4 h-4" />
                            Eliminar
                          </Button>
                        </div>
                      </div>
                    );
                  })}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Subtitle Editor */}
        <TabsContent value="editor" className="space-y-6">
          {selectedTrack ? (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <FileText className="w-5 h-5" />
                  Editor de Subtítulos - {selectedTrack.language}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {/* Timeline Controls */}
                  <div className="flex items-center gap-4 p-4 bg-muted rounded-lg">
                    <Button size="sm" variant="outline">
                      <SkipBack className="w-4 h-4" />
                    </Button>
                    <Button size="sm" variant="outline">
                      {isPlaying ? <Pause className="w-4 h-4" /> : <Play className="w-4 h-4" />}
                    </Button>
                    <Button size="sm" variant="outline">
                      <SkipForward className="w-4 h-4" />
                    </Button>
                    <div className="flex-1">
                      <div className="text-sm font-mono">{formatTime(currentTime)}</div>
                    </div>
                    <Button size="sm">
                      <Plus className="w-4 h-4" />
                      Nuevo Cue
                    </Button>
                  </div>

                  {/* Cues List */}
                  <div className="space-y-2 max-h-96 overflow-y-auto">
                    {cues.map((cue, index) => (
                      <div key={cue.id} className="flex items-start gap-4 p-3 border rounded-lg">
                        <div className="text-sm text-muted-foreground w-12">
                          #{index + 1}
                        </div>
                        <div className="flex-1 space-y-2">
                          <div className="flex items-center gap-2 text-sm font-mono">
                            <Clock className="w-4 h-4" />
                            {formatTime(cue.startTime)} → {formatTime(cue.endTime)}
                          </div>
                          <div className="text-sm">{cue.text}</div>
                        </div>
                        <div className="flex items-center gap-1">
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => setEditingCue(cue)}
                          >
                            <Edit className="w-4 h-4" />
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            className="text-red-600"
                          >
                            <Trash2 className="w-4 h-4" />
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>
          ) : (
            <Card>
              <CardContent className="text-center py-8">
                <FileText className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-lg font-medium mb-2">Selecciona un track</h3>
                <p className="text-muted-foreground">Elige un track de subtítulos para editar</p>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        {/* Preview */}
        <TabsContent value="preview" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Eye className="w-5 h-5" />
                Vista Previa de Subtítulos
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="relative bg-black rounded-lg" style={{ height: '400px' }}>
                <div className="absolute inset-0 bg-gradient-to-br from-blue-900 to-purple-900 opacity-50" />
                <div className="absolute inset-0 flex items-center justify-center text-white/30 text-6xl font-bold">
                  VIDEO DEMO
                </div>
                
                {/* Subtitle overlay */}
                <div className="absolute bottom-4 left-4 right-4">
                  <div className="bg-black/80 text-white text-center py-2 px-4 rounded">
                    Este es un ejemplo de subtítulo en la vista previa
                  </div>
                </div>
                
                {/* Controls */}
                <div className="absolute bottom-4 left-4 flex items-center gap-2">
                  <Select defaultValue="es">
                    <SelectTrigger className="w-40">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {tracks.map(track => {
                        const language = SUPPORTED_LANGUAGES.find(l => l.code === track.languageCode);
                        return (
                          <SelectItem key={track.id} value={track.languageCode}>
                            {language?.flag} {track.language}
                          </SelectItem>
                        );
                      })}
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Edit Cue Dialog */}
      {editingCue && (
        <Dialog open={!!editingCue} onOpenChange={() => setEditingCue(null)}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>Editar Subtítulo</DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label>Tiempo de Inicio</Label>
                  <Input
                    value={formatTime(editingCue.startTime)}
                    onChange={(e) => {
                      // Parse time and update
                    }}
                    className="font-mono"
                  />
                </div>
                <div className="space-y-2">
                  <Label>Tiempo de Fin</Label>
                  <Input
                    value={formatTime(editingCue.endTime)}
                    onChange={(e) => {
                      // Parse time and update
                    }}
                    className="font-mono"
                  />
                </div>
              </div>
              
              <div className="space-y-2">
                <Label>Texto</Label>
                <Textarea
                  value={editingCue.text}
                  onChange={(e) => setEditingCue({ ...editingCue, text: e.target.value })}
                  rows={4}
                />
              </div>
              
              <div className="flex justify-end gap-2">
                <Button variant="outline" onClick={() => setEditingCue(null)}>
                  Cancelar
                </Button>
                <Button onClick={() => saveCue(editingCue)} className="flex items-center gap-2">
                  <Save className="w-4 h-4" />
                  Guardar
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      )}
    </div>
  );
};
